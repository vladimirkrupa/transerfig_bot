import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import Text
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime
import json

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ Render
TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID)
ADMIN_ID = 1359055991

# –í–æ–ø—Ä–æ—Å—ã
questions = [
    "–ù–∞ —á—ë–º —Ç—ã —Å–µ–≥–æ–¥–Ω—è —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω?",
    "–ß—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è —Ö–æ—á–µ—à—å –ø—Ä–∏–≤–ª–µ—á—å –≤ —Å–≤–æ—é –∂–∏–∑–Ω—å?",
    "–ö–∞–∫–∏–µ –º—ã—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç–ø—É—Å—Ç–∏—Ç—å?",
    "–ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏–Ω–µ—Å—ë—Ç —Ç–µ–±–µ —Ä–∞–¥–æ—Å—Ç—å?",
    "–ß–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ—Å—Ç–∏—á—å –≤ –±–ª–∏–∂–∞–π—à–∏–µ 24 —á–∞—Å–∞?",
    "–ß—Ç–æ —Ç—ã –æ—Ç–ø—É—Å—Ç–∏—à—å, —á—Ç–æ–±—ã —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –ª—É—á—à–µ?"
]

# –¶–∏—Ç–∞—Ç—ã
quotes = [
    "‚Äú–£—Å–ø–µ—Ö ‚Äî —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è.‚Äù ‚Äî –î–∂–∏–º –†–æ–Ω",
    "‚Äú–ë–æ–≥–∞—Ç—ã–µ –ª—é–¥–∏ —Ñ–æ–∫—É—Å–∏—Ä—É—é—Ç—Å—è –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. –ë–µ–¥–Ω—ã–µ ‚Äî –Ω–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è—Ö.‚Äù ‚Äî –¢. –•–∞—Ä–≤ –≠–∫–µ—Ä",
    "‚Äú–î—É–º–∞–π –º–∞—Å—à—Ç–∞–±–Ω–æ.‚Äù ‚Äî –î–æ–Ω–∞–ª—å–¥ –¢—Ä–∞–º–ø",
    "‚Äú–§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ, –∞ –Ω–µ –Ω–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è—Ö.‚Äù ‚Äî –¢–æ–Ω–∏ –†–æ–±–±–∏–Ω—Å"
]

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}
user_data = {}  # id: {"name": ..., "phone": ..., "answers": {"–¥–∞—Ç–∞": [(–≤–æ–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç)]}}

# –ö–Ω–æ–ø–∫–∏
contact_btn = KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)
contact_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(contact_btn)

# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    uid = message.from_user.id
    user_states[uid] = 0
    name = message.from_user.full_name
    if uid not in user_data:
        user_data[uid] = {"name": name, "phone": "", "answers": {}}
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=contact_kb)

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def contact_handler(message: types.Message):
    uid = message.from_user.id
    user_data[uid]["phone"] = message.contact.phone_number
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ù–∞—á–Ω–µ–º —É—Ç—Ä–µ–Ω–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã:", reply_markup=types.ReplyKeyboardRemove())
    await message.answer(questions[0])

@dp.message_handler(lambda m: m.from_user.id in user_states)
async def answer_handler(message: types.Message):
    uid = message.from_user.id
    index = user_states[uid]
    today = datetime.now().strftime("%Y-%m-%d")
    if today not in user_data[uid]["answers"]:
        user_data[uid]["answers"][today] = []
    user_data[uid]["answers"][today].append((questions[index], message.text))
    index += 1
    if index < len(questions):
        user_states[uid] = index
        await message.answer(questions[index])
    else:
        await message.answer("–°–ø–∞—Å–∏–±–æ! –í–æ—Ç —Ü–∏—Ç–∞—Ç–∞ –Ω–∞ –¥–µ–Ω—å:")
        await message.answer(quotes[index % len(quotes)])
        user_states.pop(uid)

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@dp.message_handler(lambda m: m.from_user.id == ADMIN_ID and m.text.lower() == "admin")
async def admin_panel(message: types.Message):
    kb = InlineKeyboardMarkup(row_width=1)
    for uid in user_data:
        name = user_data[uid]["name"]
        kb.add(InlineKeyboardButton(f"{name}", callback_data=f"user_{uid}"))
    await message.answer("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("user_"))
async def show_user_data(callback: types.CallbackQuery):
    uid = int(callback.data.split("_")[1])
    data = user_data[uid]
    text = f"üë§ {data['name']}\nüìû {data['phone']}\n"
    for date, entries in data["answers"].items():
        text += f"\nüìÖ {date}:\n"
        for q, a in entries:
            text += f"{q}\n–û—Ç–≤–µ—Ç: {a}\n"
    await callback.message.answer(text[:4096])  # Telegram limit

# –†–∞—Å—Å—ã–ª–∫–∞ —É—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º
async def send_daily_questions():
    for uid in user_data:
        user_states[uid] = 0
        await bot.send_message(uid, "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –≤–æ–ø—Ä–æ—Å–æ–≤:")
        await bot.send_message(uid, questions[0])

async def send_evening_questions():
    for uid in user_data:
        user_states[uid] = 0
        await bot.send_message(uid, "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –≤–æ–ø—Ä–æ—Å–æ–≤:")
        await bot.send_message(uid, questions[0])

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler.add_job(send_daily_questions, "cron", hour=6, minute=0)
scheduler.add_job(send_evening_questions, "cron", hour=20, minute=30)
scheduler.start()

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
