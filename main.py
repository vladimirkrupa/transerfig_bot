import os
from aiogram import Bot, Dispatcher, executor, types
from datetime import datetime
import logging

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")

# –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π Telegram ID
ADMIN_ID = 1359055991  # ‚Üê –ó–ê–ú–ï–ù–ò –Ω–∞ —Å–≤–æ–π ID

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –í–æ–ø—Ä–æ—Å—ã
questions = [
    "–ù–∞ —á—ë–º —Ç—ã —Å–µ–≥–æ–¥–Ω—è —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω?",
    "–ß—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è —Ö–æ—á–µ—à—å –ø—Ä–∏–≤–ª–µ—á—å –≤ —Å–≤–æ—é –∂–∏–∑–Ω—å?",
    "–ö–∞–∫–∏–µ –º—ã—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç–ø—É—Å—Ç–∏—Ç—å?",
    "–ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏–Ω–µ—Å—ë—Ç —Ç–µ–±–µ —Ä–∞–¥–æ—Å—Ç—å?",
    "–ß–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ—Å—Ç–∏—á—å –≤ –±–ª–∏–∂–∞–π—à–∏–µ 24 —á–∞—Å–∞?",
    "–ß—Ç–æ —Ç—ã –æ—Ç–ø—É—Å—Ç–∏—à—å, —á—Ç–æ–±—ã —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –ª—É—á—à–µ?"
]

# –¶–∏—Ç–∞—Ç—ã
quotes = [
    "‚Äú–£—Å–ø–µ—Ö ‚Äî —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è.‚Äù ‚Äî –î–∂–∏–º –†–æ–Ω",
    "‚Äú–ë–æ–≥–∞—Ç—ã–µ –ª—é–¥–∏ —Ñ–æ–∫—É—Å–∏—Ä—É—é—Ç—Å—è –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. –ë–µ–¥–Ω—ã–µ ‚Äî –Ω–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è—Ö.‚Äù ‚Äî –¢. –•–∞—Ä–≤ –≠–∫–µ—Ä",
    "‚Äú–î—É–º–∞–π –º–∞—Å—à—Ç–∞–±–Ω–æ.‚Äù ‚Äî –î–æ–Ω–∞–ª—å–¥ –¢—Ä–∞–º–ø",
    "‚Äú–§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ, –∞ –Ω–µ –Ω–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è—Ö.‚Äù ‚Äî –¢–æ–Ω–∏ –†–æ–±–±–∏–Ω—Å"
]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
user_answers = {}

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = 0
    user_answers[user_id] = []
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞–º–µ—Ä–µ–Ω–∏–π. –ù–∞—á–Ω—ë–º —É—Ç—Ä–µ–Ω–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã:")
    await message.answer(questions[0])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
@dp.message_handler(lambda message: message.from_user.id in user_states)
async def handle_answer(message: types.Message):
    user_id = message.from_user.id
    state = user_states[user_id]
    user_answers[user_id].append((questions[state], message.text))
    state += 1
    user_states[user_id] = state

    if state < len(questions):
        await message.answer(questions[state])
    else:
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã. –í–æ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏—è –Ω–∞ –¥–µ–Ω—å:")
        await message.answer(quotes[state % len(quotes)])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with open(f"{user_id}_log.txt", "a", encoding="utf-8") as f:
            f.write(f"\n--- {now} ---\n")
            for q, a in user_answers[user_id]:
                f.write(f"{q}\n–û—Ç–≤–µ—Ç: {a}\n")

        user_states.pop(user_id)
        user_answers.pop(user_id)

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@dp.message_handler(commands=["admin"])
async def admin_cmd(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    await message.answer("üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.\n–í—ã –º–æ–∂–µ—Ç–µ –∑–¥–µ—Å—å —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º.")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
